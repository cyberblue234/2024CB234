#include "subsystems/Elevator.h"

bool elevator1Registered = false;
bool elevator2Registered = false;

Elevator::Elevator(Limelight *limelight3)
{
    this->limelight3 = limelight3;

    elevator1Motor.GetConfigurator().Apply(configs::TalonFXConfiguration{});
    configs::TalonFXConfiguration elevator1Config{};

    configs::MotorOutputConfigs elevator1MotorOutput{};
    elevator1MotorOutput.WithInverted(signals::InvertedValue::Clockwise_Positive);
    elevator1MotorOutput.WithNeutralMode(signals::NeutralModeValue::Brake);
    elevator1Config.WithMotorOutput(elevator1MotorOutput);

    elevator1Motor.GetConfigurator().Apply(elevator1Config);

    elevator2Motor.GetConfigurator().Apply(configs::TalonFXConfiguration{});
    configs::TalonFXConfiguration elevator2Config{};

    configs::MotorOutputConfigs elevator2MotorOutput{};
    elevator2MotorOutput.WithNeutralMode(signals::NeutralModeValue::Brake);
    elevator2Config.WithMotorOutput(elevator2MotorOutput);

    elevator2Motor.GetConfigurator().Apply(elevator2Config);

    shooterAngleEncoder.SetDistancePerRotation(-360);

    elevatorPID.SetTolerance(0.5);

    correctionPID.SetSetpoint(0.0);
}

void Elevator::Periodic()
{
    if (GetElevator1BottomLimit() && (GetElevator1Encoder() > 0.025 || GetElevator1Encoder() < -0.025))
    {
        ResetElevator1Encoder();
        elevator1Registered = true;
    }
    if (GetElevator2BottomLimit() && (GetElevator2Encoder() > 0.025 || GetElevator2Encoder() < -0.025))
    {
        ResetElevator2Encoder();
        elevator2Registered = true;
    }
    UpdateTelemetry();
}


void Elevator::ElevatorControls()
{
    if (Controls::gamepad.GetPOV() == 270) 
    {
        double power = Controls::gamepad.GetRightBumper() ? -0.5 : 0.5;
        SetElevator1Motor(power);
    }
    else if (Controls::gamepad.GetPOV() == 90) 
    {
        double power = Controls::gamepad.GetRightBumper() ? -0.5 : 0.5;
        SetElevator2Motor(power);
    }
    else if (Controls::ElevatorUp() == true)
    {
        double power = GetElevatorSpeed();
        ElevatorControl(power, ControlMethods::Speed);
    }
    else if (Controls::ElevatorDown() == true)
    {
        double power = -GetElevatorSpeed();
        ElevatorControl(power, ControlMethods::Speed);
    }
    else if (Controls::GroundIntake() == true || Controls::SourceIntake() == true)
    {
        double angle = GetIntakeAngle();
        ElevatorControl(angle, ControlMethods::Position);
    }
    else if (Controls::ShooterMotors() == true && Controls::ManualScore() == false && Controls::ManualAmp() == false)
    {
        double angle;
        if (Controls::AutoScore() == true)
        {
            if (limelight3->IsTargetValid())
            {
                angle = CalculateSpeakerAngle();
            }
            else
            {
                angle = GetIntakeAngle();
            }
        }
        else if (Controls::Mid() == true) 
        {
            angle = GetMidAngle();
        }
        else if (Controls::Stage() == true) 
        {
            angle = GetStageAngle();
        }
        else if (Controls::AmpShot() == true) 
        {
            angle = GetAmpAngle();
        }
        else if (Controls::Trap() == true) 
        {
            angle = GetTrapAngle();
        }
        else 
        {
            angle = GetCloseAngle();
        }

        frc::SmartDashboard::PutNumber("Desired Elevator Angle", angle);
        ElevatorControl(angle, ControlMethods::Position);
    }
    else
    {
        if (Controls::AutoElevatorDown() == false)
        {
            double power = -GetElevatorSpeed();
            ElevatorControl(power, ControlMethods::Speed);
        }
        else
        {
            StopMotors();
        }
    }

    if (Controls::GroundIntake() == false)
    {
        if (GetElevator1BottomLimit() == true && GetElevator2BottomLimit() == true)
        {
            LED::LEDControls(LED::ControlMethods::kElevatorDown);
        }
        else
        {
            LED::LEDControls(LED::ControlMethods::kElevatorUp);
        }
    }
}

// Returns the Angle from parallel to floor in degrees using limelight
double Elevator::CalculateSpeakerAngle()
{
    // Distance from speaker in meters
    auto distance = limelight3->GetDistanceFromTarget();
    if ((double) distance < 1.45) return -52;
    if ((double) distance < 1.6) return -51;
    if ((double) distance < 1.8) return -49;
    if ((double) distance < 2.1) return intakeAngle;
    // Height we are targetting in meters
    double targetHeight = ElevatorConstants::kSpeakerHeight + (((double)distance / ElevatorConstants::kForce) * ElevatorConstants::kGravity);
    // Get the angle we want to go to in order to shoot in radians, then converting it to degrees
    double targetAngle = atan(targetHeight / distance) * (180 / std::numbers::pi);
    // Adding the "Kickup" generated by the shooter and then returning that
    return -(targetAngle - ElevatorConstants::kKickup);
}

void Elevator::ElevatorControl(double value, ControlMethods method)
{
    bool directionTest;
    if (method == ControlMethods::Speed) directionTest = value > 0;
    else if (method == ControlMethods::Position) directionTest = value > GetShooterAngle();

    bool elevator1Limit = directionTest ? GetElevator1Encoder() > GetHardEncoderLimit() : GetElevator1BottomLimit() == true || (GetElevator1Encoder() < -2.0 && elevator1Registered == true);
    bool elevator2Limit = directionTest ? GetElevator2Encoder() > GetHardEncoderLimit() : GetElevator2BottomLimit() == true || (GetElevator2Encoder() < -2.0 && elevator2Registered == true);

    double absDifference = abs(GetElevator1Encoder() - GetElevator2Encoder());
    double correction = 1 - abs(correctionPID.Calculate(absDifference));
    double motor1Correction = 1.0;
    double motor2Correction = 1.0;

    // directionTest is true when going up
    if (directionTest == true) 
    {
        // Going up, if one encoder is greater than the other it should be slown down
        if (GetElevator1Encoder() > GetElevator2Encoder())
        {
            motor1Correction = correction;
        }
        else
        {
            motor2Correction = correction;
        }
    }
    else
    {
        // Going down, if one encoder is less than the other it should be slown down
        if (GetElevator1Encoder() > GetElevator2Encoder())
        {
            motor2Correction = correction;
        }
        else
        {
            motor1Correction = correction;
        }
    }

    // Slow down when the elevator gets close to the bottom
    if (GetElevator1Encoder() < 5) motor1Correction *= speedLimit;
    if (GetElevator2Encoder() < 5) motor2Correction *= speedLimit;

    frc::SmartDashboard::PutNumber("Motor 1 Correction", motor1Correction);
    frc::SmartDashboard::PutNumber("Motor 2 Correction", motor2Correction);

    if (elevator1Limit == false)
    {
        if (method == ControlMethods::Speed) SetElevator1Motor(value * motor1Correction);
        else if (method == ControlMethods::Position) SetElevator1MotorPosition(value, motor1Correction);
    }
    else
        SetElevator1Motor(0.0);
    if (elevator2Limit == false)
    {
        if (method == ControlMethods::Speed) SetElevator2Motor(value * motor2Correction);
        else if (method == ControlMethods::Position) SetElevator2MotorPosition(value, motor2Correction);
    }
    else
    {
        SetElevator2Motor(0.0);
    }
}

void Elevator::UpdateTelemetry()
{
    frc::SmartDashboard::PutNumber("Shooter Angle Encoder Count", shooterAngleEncoder.GetAbsolutePosition());
    frc::SmartDashboard::PutNumber("Shooter Angle Degrees", GetShooterAngle()); 
    frc::SmartDashboard::PutNumber("Elevator 1 Encoder Pos", GetElevator1Encoder());
    frc::SmartDashboard::PutNumber("Elevator 2 Encoder Pos", GetElevator2Encoder());
    frc::SmartDashboard::PutBoolean("Limit Switch 1", GetElevator1BottomLimit());
    frc::SmartDashboard::PutBoolean("Limit Switch 2", GetElevator2BottomLimit());
    frc::SmartDashboard::PutBoolean("Safe", GetElevator1BottomLimit() && GetElevator2BottomLimit());
}