#include "subsystems/Elevator.h"

Elevator::Elevator(Limelight *limelight3)
{
    this->limelight3 = limelight3;

    elevator1Motor.RestoreFactoryDefaults();
    elevator2Motor.RestoreFactoryDefaults();

    elevator1Motor.SetInverted(true);

    frc::SmartDashboard::PutNumber("Elevator P", ElevatorConstants::kElevatorP);
    frc::SmartDashboard::PutNumber("Elevator I", ElevatorConstants::kElevatorI);
    frc::SmartDashboard::PutNumber("Elevator D", ElevatorConstants::kElevatorD);
    frc::SmartDashboard::PutNumber("Elevator F", ElevatorConstants::kElevatorF);

    frc::SmartDashboard::PutNumber("Elevator Speed", elevatorSpeed);
    frc::SmartDashboard::PutNumber("Elevator Amp Angle", ampAngle);

    shooterAngleEncoder.SetPositionOffset(ShooterConstants::SHOOTER_ANGLE_OFFSET);
    shooterAngleEncoder.SetDistancePerRotation(-360);
}

void Elevator::Periodic()
{
    UpdateTelemetry();
}

void Elevator::AlignShooterToSpeaker()
{
    double current = GetShooterAngle();
    double target = CalculateSpeakerAngle();
    alignmentDifference = current - target;
    SetElevatorMotorsPosition(GetShooterRevolutions() + (alignmentDifference / 360) * ElevatorConstants::kRotationsPerDegree);
}

// Returns the Angle from parallel to floor in degrees using limelight
double Elevator::CalculateSpeakerAngle()
{
    // Distance from speaker in meters
    auto distance = limelight3->GetDistanceFromTarget();
    // Height we are targetting in meters
    double targetHeight = ElevatorConstants::kSpeakerHeight + (((double)distance / ElevatorConstants::kForce) * ElevatorConstants::kGravity);
    // Get the angle we want to go to in order to shoot in radians, then converting it to degrees
    double targetAngle = atan(targetHeight / distance) * (180 / std::numbers::pi);
    // Adding the "Kickup" generated by the shooter and then returning that
    return (targetAngle - ElevatorConstants::kKickup);
}

void Elevator::UpdateTelemetry()
{
    frc::SmartDashboard::PutNumber("Shooter Encoder Count", shooterAngleEncoder.GetAbsolutePosition());
    frc::SmartDashboard::PutNumber("Shooter Angle Degrees", GetShooterAngle());
    frc::SmartDashboard::PutNumber("Elevator1 Encoder", elevator1Encoder.GetPosition());
    frc::SmartDashboard::PutNumber("Elevator2 Encoder", elevator2Encoder.GetPosition());
}